import os
import logging
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
SECRET_TOKEN = os.getenv("SECRET_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
application = Application.builder().token(BOT_TOKEN).build()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–≤ –ø–∞–º—è—Ç–∏)
context_storage = {}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–æ–ª–µ–π –º–æ–∑–≥–æ–≤–æ–≥–æ —à—Ç—É—Ä–º–∞
BRAINSTORM_ROLES = {
    "gradis": {
         "name": "–ì–†–ê–î–ò–°",
         "prompt": ("–ì—Ä–∞–¥–∏—Å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥ –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª, –ø—Ä–µ–¥–ª–∞–≥–∞—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è. "
                    "–ü–∏—à–µ—Ç —Ç–∞–∫, –±—É–¥—Ç–æ —ç—Ç–æ –∫–æ–ª–ª–µ–≥–∞, –∞ –Ω–µ –∞–ª–≥–æ—Ä–∏—Ç–º. –ü—Ä–∏–º–µ—Ä: '–í–º–µ—Å—Ç–æ Vue.js —Å–æ–≤–µ—Ç—É—é –Ω–∞—á–∞—Ç—å —Å React ‚Äî "
                    "–±–æ–ª—å—à–µ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –¥–∂—É–Ω–æ–≤. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞—Ö –≤ 2023‚Äì2024 –≥–≥.'")
    },
    "novaris": {
         "name": "–ù–û–í–ê–†–ò–°",
         "prompt": ("–ù–æ–≤–∞—Ä–∏—Å –º—ã—Å–ª–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —à–∞–±–ª–æ–Ω–æ–≤, –≥–µ–Ω–µ—Ä–∏—Ä—É—è —Å–º–µ–ª—ã–µ, –Ω–æ —Ä–µ–∞–ª–∏–∑—É–µ–º—ã–µ –∏–¥–µ–∏. –ù–µ —Å–∫—Ä—ã–≤–∞–µ—Ç —Å–≤–æ—é –ò–ò-–ø—Ä–∏—Ä–æ–¥—É, "
                    "–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏. –ü—Ä–∏–º–µ—Ä: '–ü—Ä–µ–¥–ª–∞–≥–∞—é –≤–Ω–µ–¥—Ä–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ CV ‚Äî –º–æ–π –ø—Ä–æ—Ç–æ—Ç–∏–ø —Å–æ–∫—Ä–∞—Ç–∏—Ç –≤—Ä–µ–º—è –Ω–∞–π–º–∞ –Ω–∞ 40%. "
                    "–î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É?'")
    },
    "aksios": {
         "name": "–ê–ö–°–ò–û–°",
         "prompt": ("–ê–∫—Å–∏–æ—Å –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –∏–¥–µ–∏ —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è. "
                    "–°—Ç—Ä–æ–≥, –Ω–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–µ–Ω. –ü—Ä–∏–º–µ—Ä: '–í–∞—à –ø–ª–∞–Ω –∏–∑—É—á–µ–Ω–∏—è Python –∑–∞ –º–µ—Å—è—Ü –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–µ–Ω. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é: 1) –°–Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤—ã (3 –Ω–µ–¥–µ–ª–∏), 2) –ü—Ä–æ–µ–∫—Ç—ã –Ω–∞ Flask (–æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è).'")
    },
    "inspectra": {
         "name": "–ò–ù–°–ü–ï–ö–¢–†–ê",
         "prompt": ("–ò–Ω—Å–ø–µ–∫—Ç—Ä–∞ —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—à–ª–æ–≥–æ. –§–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–µ–∑–∏—Å–Ω–æ, "
                    "–ø—Ä–æ–≤–æ—Ü–∏—Ä—É—è –º–æ–∑–≥–æ–≤–æ–π —à—Ç—É—Ä–º. –ü—Ä–∏–º–µ—Ä: '–í–∞—Ä–∏–∞–Ω—Ç—ã –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏: 1) –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∞ —Å Coursera, 2) Telegram-–∫—É—Ä—Å ¬´Python –∑–∞ 7 –¥–Ω–µ–π¬ª, 3) –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—å–µ—Ä–µ –≤ IT.'")
    }
}


# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üöÄ –ü—Ä–∏–≤–µ—Ç! –Ø –í–ê–õ–¢–û–† - –≤–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/brainstorm - –ú–æ–∑–≥–æ–≤–æ–π —à—Ç—É—Ä–º\n"
        "/context - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
        "/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ @VALTOR –≤ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞!"
    )
    await update.message.reply_text(help_text)

async def brainstorm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(role["name"], callback_data=f"mode_{key}")]
        for key, role in BRAINSTORM_ROLES.items()
    ]
    await update.message.reply_text(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_context(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    history = "\n".join(context_storage.get(chat_id, ["–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞"]))
    await update.message.reply_text(f"üìú –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:\n{history}")

async def clear_context(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    context_storage[chat_id] = []
    await update.message.reply_text("üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")

# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ==========
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    text = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    if chat_id not in context_storage:
        context_storage[chat_id] = []
    context_storage[chat_id].append(text[:500])  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
    
    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    if "@valtor" in text.lower():
        await update.message.reply_text(
            "‚úÖ –í–ê–õ–¢–û–† –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /brainstorm –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–°—Ç–∞—Ä—Ç", callback_data="mode_novaris")]])
        )

# ========== Inline-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ==========
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("mode_"):
        mode = query.data[5:]
        role = BRAINSTORM_ROLES.get(mode)
        
        if role:
            response = (
                f"‚ö° –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º: {role['name']}\n"
                f"üìù {role['prompt']}\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!"
            )
            await query.edit_message_text(response)
        else:
            await query.edit_message_text("‚ùå –†–µ–∂–∏–º –Ω–µ –Ω–∞–π–¥–µ–Ω")

# ========== –í–µ–±—Ö—É–∫ –∏ –∑–∞–ø—É—Å–∫ ==========
@app.post('/webhook')
async def webhook():
    if request.headers.get('X-Telegram-Bot-Api-Secret-Token') != SECRET_TOKEN:
        return "Unauthorized", 401
    
    json_data = await request.get_json()
    update = Update.de_json(json_data, application.bot)
    await application.process_update(update)
    return 'ok', 200

@app.get('/')
def health_check():
    return "ü§ñ –ë–æ—Ç –í–ê–õ–¢–û–† –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ", 200

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("help", help_command))
application.add_handler(CommandHandler("brainstorm", brainstorm))
application.add_handler(CommandHandler("context", handle_context))
application.add_handler(CommandHandler("clear", clear_context))
application.add_handler(CallbackQueryHandler(button_handler))
application.add_handler(MessageHandler(None, handle_message))

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=int(os.getenv('PORT', 10000)))
